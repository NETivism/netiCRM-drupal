<?php

require_once 'civicrm.user.inc';

/**
 * CiviCRM initialize function
 * 
 * For backward compatibility, we add this to prevent module blocked by this old api
 */
function civicrm_initialize() {
  \Drupal::service('civicrm')->initialize();
}

/**
 * Implements hook_library_info_build().
 *
 * Static add js / css definition
 */
function civicrm_library_info_build() {
  // do not invoke during installing
  $libraries = [];

  // core
  $libraries['civicrm-js-core'] = [
    'header' => true,
    'js' => ['../packages/jquery/jquery.js' => ['weight' => -10, 'minified' => true]],
  ];
  $libraries['civicrm-js-allpage'] = [
    'header' => false,
    'js' => ['../js/insights.js' => ['weight' => -0.01, 'preprocess' => false]],
    'dependencies' => [
      'core/drupalSettings'
    ]
  ];
  $libraries['civicrm-css-allpage']['css']['state']['../packages/material-design-iconic-font/css/material-design-iconic-font.min.css'] = [ 'weight' => 0];
  $libraries['civicrm-css-core']['css']['state']['../css/civicrm.css'] = [ 'weight' => 200 ];

  // packages
  $crm_path = \Drupal::service('extension.list.module')->getPath('civicrm');
  $file_path = DRUPAL_ROOT.base_path().$crm_path.'/../templates/CRM/common/jquery.files.tpl';
  $buffer = file_get_contents($file_path);
  $buffer = preg_replace('/\{\*(.*?)\*\}/s', '', $buffer);
  $lines  = preg_split( '/\s+/', $buffer);

  $libraries['civicrm-css-packages'] = [];
  $libraries['civicrm-js-packages'] = [
    'dependencies' => [
      'civicrm/civicrm-js-core',
    ],
    'header' => true,
  ];
  $weight = 0;
  foreach($lines as $line) {
    if ( strpos( $line, '.css' ) !== false ) {
      if (strpos($line, 'material-design-iconic-font')) {
        continue;  // added on all-css
      }
      $weight++;
      $libraries['civicrm-css-packages']['css']['state']['../'.$line] = [ 'weight' => $weight ];
    }
    if ( strpos($line, '.js' ) !== false ) {
      if (strpos($line, 'packages/jquery/jquery-1') !== false) {
        continue;
      }
      $libraries['civicrm-js-packages']['js']['../'.$line] = ['weight' => -5, 'header' => true];
    }
  }
  $libraries['civicrm-js-packages']['js']['../js/Common.js'] = ['weight' => -2];

  // noconflict
  $libraries['civicrm-js-noconflict'] = [
    'dependencies' => [
      'civicrm/civicrm-js-packages',
    ],
    'header' => true,
  ];
  $libraries['civicrm-js-noconflict']['js']['../js/noconflict.js'] = ['weight' => -1];

  // additional, mailing editor
  $libraries['civicrm-js-mailingeditor'] = [
    'dependencies' => [
      'civicrm/civicrm-js-packages',
    ],
    'header' => true,
  ];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/poshytip/src/jquery.poshytip.min.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/x-editable/dist/jquery-editable/js/jquery-editable-poshytip.min.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/x-editable/dist/inputs-ext/quill/lib/quill.min.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/x-editable/dist/inputs-ext/quill/lib/placeholder/quill.placeholder.min.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/x-editable/dist/inputs-ext/quill/lib/emoji/quill-emoji.min.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/x-editable/dist/inputs-ext/quill/quill.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/pickr/dist/pickr.min.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/Magnific-Popup/dist/jquery.magnific-popup.min.js'] = ['weight' => -3];
  $libraries['civicrm-js-mailingeditor']['js']['../packages/mailingEditor/mailingEditor.js'] = ['weight' => -3];

  // additional, magnific-popup
  $libraries['civicrm-js-magnific-popup'] = [
    'dependencies' => [
      'civicrm/civicrm-js-packages',
    ],
    'header' => true,
  ];
  $libraries['civicrm-js-magnific-popup']['js']['../packages/Magnific-Popup/dist/jquery.magnific-popup.min.js'] = ['weight' => -3];

  // additional, side panel
  $libraries['civicrm-js-sidepanel'] = [
    'dependencies' => [
      'civicrm/civicrm-js-packages',
    ],
    'header' => true,
  ];
  $libraries['civicrm-js-sidepanel']['js']['../packages/sidePanel/sidePanel.js'] = ['weight' => -3];

  // additional, side aicompletion
  $libraries['civicrm-js-aicompletion'] = [
    'dependencies' => [
      'civicrm/civicrm-js-packages',
    ],
    'header' => true,
  ];
  $libraries['civicrm-js-aicompletion']['js']['../packages/AICompletion/AICompletion.js'] = ['weight' => -3];

  $libraries['civicrm-js-zh-tw'] = [
    'dependencies' => [
      'civicrm/civicrm-js-packages',
    ],
    'header' => true,
  ];
  $libraries['civicrm-js-zh-tw']['js']['../packages/jquery/plugins/jquery.select2.zh-TW.js'] = ['weight' => -3];
  $libraries['civicrm-js-zh-tw']['js']['../packages/jquery/jquery-ui/development-bundle/ui/i18n/jquery.ui.datepicker-zh-TW.js'] = ['weight' => -3];
  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 * 
 * Dynamic add custom css into current theme
 */
function civicrm_library_info_alter(&$libraries, $extension) {
  // do not invoke during installing
  if (\Drupal::moduleHandler()->moduleExists('civicrm') && !class_exists('CRM_Core_Config')) {
    return;
  }
  $theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  if (!empty(CRM_Core_Config::singleton()->customCSSURL) && $extension == $theme) {
    $libraries['global-styling']['css']['theme'][CRM_Core_Config::singleton()->customCSSURL] = [
      'weight' => 1,
      'type' => 'external',
    ];
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Inject arbitrary html into the head region.
 */
function civicrm_page_attachments(array &$page) {
  // all page js place here
  $page['#attached']['library'][] = 'civicrm/civicrm-js-allpage';
  $page['#attached']['library'][] = 'civicrm/civicrm-css-allpage';
  $page['#attached']['drupalSettings']['basePath'] = base_path();
  $crm_path = \Drupal::service('extension.list.module')->getPath('civicrm');
  $page['#attached']['drupalSettings']['civicrm']['resourceBase'] = base_path().$crm_path.'/../';

  // do not invoke during installing
  if (\Drupal::moduleHandler()->moduleExists('civicrm') && !class_exists('CRM_Core_Config')) {
    return;
  }
  // Only do anything if CiviCRM is bootstrapped.
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', ltrim($current_path, '/'));

  /** @var \Drupal\civicrm\CivicrmPageState $page_state */
  $page_state = \Drupal::service('civicrm.page_state');

  // Attach CSS and JS.
  if ($path_args[0] == 'civicrm' || $path_args[0] == 'user' || \Drupal::service('civicrm')->initialized) {
    $page['#attached']['library'][] = 'civicrm/civicrm-css-core';
    $page['#attached']['library'][] = 'civicrm/civicrm-css-packages';
    $page['#attached']['library'][] = 'civicrm/civicrm-js-core';
    $page['#attached']['library'][] = 'civicrm/civicrm-js-packages';
    $page['#attached']['library'][] = 'civicrm/civicrm-js-noconflict';
  }
  $dynamic = CRM_Core_Config::singleton()->userSystem::$jsLibraries;
  if (!empty($dynamic) && is_array($dynamic)) {
    foreach ($dynamic as $lib => $doncare) {
      $page['#attached']['library'][] = $lib;
    }
  }
  if (!empty(CRM_Core_Config::singleton()->customCSSURL)) {
    $page['#attached']['library'][] = 'civicrm/civicrm-css-custom';
  }

  // Any other miscellaneous headers.
  $headers = $page_state->getHtmlHeaders();
  $markup  = [
    '#type'   => 'markup',
    '#weight' => -99,
    '#markup' => \Drupal\Core\Render\Markup::create($headers),
  ];
  $page['#attached']['html_head'][] = [$markup, 'civicrm-headers'];
  $metaGroup = $page_state->getHtmlHeadersMeta();
  if (is_array($metaGroup)) {
    foreach ($metaGroup as $key => $meta) {
      $page['#attached']['html_head'][] = [$meta, 'civicrm-headers-meta-'.$meta['#tag'].'-'.$key];
    }
  }
}

/**
 * Implements hook_toolbar().
 *
 * Injects a link into the Drupal toolbar to /civicrm for users with
 * 'access civicrm' permission.
 */
function civicrm_toolbar() {
  $items = [];
  return $items;
}

/**
 * Implements hook_cron
 * 
 * Control how civicrm running job periodly
 */
function civicrm_cron(){
  $is_maintenance = \Drupal::state()->get('system.maintenance_mode');
  if (!empty($is_maintenance)) {
    return;
  }

  $last = \Drupal::state()->get('civicrm.last_cron', []);
  $time = \Drupal::time()->getRequestTime();
  $hour = date('G', $time);
  $modified = FALSE;

  // minutely
  if ($time - $last['minutely'] >= 55) {
    civicrm_initialize();
    // It works when set up to execute cron by minutely.
    $last['minutely'] = $time;
    $modified = TRUE;
    CRM_Batch_BAO_Batch::runQueue();
  }

  // hourly
  // Avoiding totally fit the time, so reducing 50 seconds.
  if ($time - $last['hourly'] >= 3550) {
    civicrm_initialize();
    $disableTappay = \Drupal\Core\Site\Settings::get('civicrm.disable_tappay_execute', FALSE);
    if ($hour > 7 && !$disableTappay) {
      CRM_Core_Payment_TapPay::doExecuteAllRecur($time);
    }
    $last['hourly'] = $time;
    $modified = TRUE;
  }

  // daily
  if ($hour >= 6 && $hour <= 8) {
    civicrm_initialize();
    if ($time - $last['daily'] >= 86350) {
      CRM_Core_Payment_TapPay::doSyncLastDaysRecords();
      CRM_Core_Payment_TapPay::doStatusCheck();
      CRM_Contribute_BAO_TaiwanACH::doStatusCheck();
      if ($hour >= 7) {
        CRM_Contact_BAO_GroupContactCache::checkAll();
      }
      $last['daily'] = $time;
      $modified = TRUE;
    }
  }

  // weekly , monthly
  if ($hour >= 2 && $hour <= 5) {
    civicrm_initialize();
    // sunday
    if ($time - $last['weekly'] >= (86400*7 - 50) && date('w') == '0') {
      CRM_Core_Config::singleton()->clearTempTables();
      CRM_Contribute_BAO_Contribution_Utils::clearDonateAgainLink();
      $last['weekly'] = $time;
      $modified = TRUE;
    }

    // start of month
    if ($time - $last['monthly'] >= (86400*30 - 50) && date('j') == '1') {
      CRM_Core_Error::purge();
      $last['month'] = $time;
      $modified = TRUE;
    }
  }

  if ($modified) {
    \Drupal::state()->set('civicrm.last_cron', $last);
  }
}


/**
 * Implements hook_entity_extra_field_info().
 *
 * Add additional pseudo-fields to the user display. This allows the UI
 * to control the order in which these are displayed, or whether they are displayed
 * at all.
 *
 * @Todo: set these fields are visible ONLY for the 'full' user display.
 */
function civicrm_entity_extra_field_info() {
  $extra['user']['user']['display']['civicrm_record'] = array(
    'label' => t('CiviCRM record link'),
    'description' => t('Link to user’s CiviCRM record.'),
    'weight' => 0,
    'visible' => FALSE,
  );
  $extra['user']['user']['display']['civicrm_dashboard'] = array(
    'label' => t('CiviCRM dashboard link'),
    'description' => t('Link to user’s CiviCRM dashboard.'),
    'weight' => 0,
    'visible' => FALSE,
  );
  $extra['user']['user']['display']['civicrm_profiles'] = array(
    'label' => t('CiviCRM profile summaries'),
    'description' => t('A list CiviCRM profile summaries.'),
    'weight' => 0,
    'visible' => FALSE,
  );

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * We use this hook to add the pseudo-fields we've added in civicrm_entity_extra_field_info()
 * to the user display.
 */
function civicrm_user_view(array &$build, \Drupal\user\UserInterface $account, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::service('civicrm')->initialize();

  // We need the $contact_id so that we know what data to pull out of Civicrm.
  // And we need the contact_id of the current user ($current_contact_id) so
  // that we can perform proper access checks.
  $current_user = \Drupal::currentUser();
  $contact_id = \CRM_Core_BAO_UFMatch::getContactId($account->id());
  $current_contact_id = \CRM_Core_BAO_UFMatch::getContactId($current_user->id());
  if (!$contact_id || !$current_contact_id) {
    return;
  }

  // Contact dashboard link.
  if (($conf = $display->getComponent('civicrm_dashboard')) && $current_user->hasPermission('access Contact Dashboard') && \CRM_Contact_BAO_Contact_Permission::allow($current_contact_id)) {
    $build['civicrm_dashboard'] = [
      '#type' => 'item',
      '#weight' => $conf['weight'],
      0 => [
        '#type' => 'link',
        '#title' => ts('View Contact Dashboard'),
        '#url' => \Drupal\Core\Url::fromRoute('civicrm.civicrm_user', [
          'reset' => 1,
          'id' => $contact_id,
        ]),
        '#prefix' => '<div class="user-page-link" id="user-page-dashboard" ><i class="zmdi zmdi-accounts-list-alt"></i> ',
        '#suffix' => '</div>',
      ],
    ];
  }

  // Contact record link.
  if (($conf = $display->getComponent('civicrm_record')) && $current_user->hasPermission('access CiviCRM') && \CRM_Contact_BAO_Contact_Permission::allow($current_contact_id)) {
    $build['civicrm_record'] = [
      '#type' => 'item',
      '#weight' => $conf['weight'],
      0 => [
        '#type' => 'link',
        '#title' => ts('View Contact Record'),
        '#url' => \Drupal\Core\Url::fromRoute('civicrm.civicrm_contact_view', [
          'reset' => 1,
          'cid' => $contact_id,
        ]),
        '#prefix' => '<div class="user-page-link" id="user-page-contact" ><i class="zmdi zmdi-view-dashboard"></i> ',
        '#suffix' => '</div>',
      ],
    ];
  }

  // Add profile summaries.
  // @Todo Do we need to check permissions before viewing each profile?
  if (($conf = $display->getComponent('civicrm_profiles')) && $current_user->hasPermission('profile view')) {
    $build['civicrm_profiles'] = array(
      '#weight' => $conf['weight'],
    );

    // We need the CiviCRM core Javascript.

    foreach (_civicrm_get_profiles($contact_id) as $id => $profile) {
      $html = (new \CRM_Profile_Page_Dynamic($contact_id, $id, NULL))->run();
      $build['civicrm_profiles']["civicrm_profile_{$id}"] = [
        '#theme' => 'civicrm_user_profile',
        '#title' => $profile['title'],
        0 => [
          '#markup' => \Drupal\Core\Render\Markup::create($html),
        ],
        // @Todo Check access to this route before displaying the link
        1 => [
          '#type' => 'link',
          '#options' => ['html' => TRUE],
          '#title' => ts('Edit %1', ['1' => $profile['title']]),
          '#url' => \Drupal\Core\Url::fromRoute('civicrm.user_profile', [
            'user' => $account->id(),
            'profile' => $id,
          ]),
          '#prefix' => '<div class="crm-section"><span class="user-page-link content" id="user-page-profile-' . $profile['name'] . '" ><i class="zmdi zmdi-edit"></i> ',
          '#suffix' => '</span></div>',
        ],
      ];
    }
  }
}

/**
 * Get 'User Account' profiles.
 *
 * We return a list of profiles filtered down to only those that are Contact based or
 * based on the $contact_id's contact type.
 */
function _civicrm_get_profiles($contact_id) {
  \Drupal::service('civicrm')->initialize();
  $profiles = array();
  $ctype = \CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $contact_id, 'contact_type');

  foreach (\CRM_Core_BAO_UFGroup::getModuleUFGroup('User Account') as $id => $uf_group) {
    $fieldType = CRM_Core_BAO_UFField::getProfileType($id);
    if (CRM_Contact_BAO_ContactType::isaSubType($fieldType)) {
      $fieldType = CRM_Contact_BAO_ContactType::getBasicType($fieldType);
    }

    // Filter profiles
    if ($fieldType == 'Contact' || $fieldType == $ctype) {
      $profiles[$id] = $uf_group;
    }
  }
  return $profiles;
}

/**
 * Implements hook_form_TAG_ID_alter().
 *
 * Attach any relevant profile form fields to user registration form.
 */
function civicrm_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $civicrm = \Drupal::service('civicrm');
  $civicrm->initialize();
  $html = \CRM_Core_BAO_UFGroup::getEditHTML(NULL, '', NULL, TRUE, TRUE, NULL, FALSE, $civicrm->getCtype());

  // Need to disable the page cache.
  \Drupal::service('page_cache_kill_switch')->trigger();

  // We need the CiviCRM core Javascript.

  $form['civicrm_profile_register'] = array(
    '#markup' => \Drupal\Core\Render\Markup::create($html),
    '#cache' => [
      'max-age' => 0,
    ],
  );
  $form['#validate'][] = '_civicrm_user_register_form_validate';
}

/**
 * Validation function for additional profile form fields attached to user registration form.
 */
function _civicrm_user_register_form_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  \Drupal::service('civicrm')->initialize();
  $errors = CRM_Core_BAO_UFGroup::isValid(NULL, '', TRUE);

  if (is_array($errors)) {
    foreach ($errors as $name => $message) {
      $form_state->setErrorByName($name, $message);
    }
  }
}


/**
 * Determine if the user is on a CiviCRM generated page.
 *
 * i.e. does the form have some civicrm unique token?
 */
function civicrm_on_user_page() {
  return isset($_POST['_qf_default']);
}

/**
 * Implements hook_theme().
 */
function civicrm_theme() {
  return array(
    'civicrm_contact' => array(
      'render element' => 'elements',
      'template' => 'civicrm-contact',
    ),
    'civicrm_user_profile' => array(
      'render element' => 'elements',
      'template' => 'civicrm-user-profile',
    )
  );
}

/**
 * Alter metatags before being cached.
 *
 * This hook is invoked prior to the meta tags for a given page are cached.
 *
 * @param array $output
 *   Metatags to be displayed.
 * @param string $instance
 *  Context.
 */
function civicrm_metatags_alter(&$metatags, &$context) {
  $current_path = \Drupal::service('path.current')->getPath();
  if (strstr($current_path, 'civicrm')) {
    civicrm_initialize();
    if(CRM_Utils_System::isSSL() == TRUE) {
      $secure = 'https';
    } else {
      $secure = 'http';
    }

    // rebuild correct link
    $items = array('og:url', 'canonical_url', 'shortlink');
    $link = "$secure://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
    foreach($items as $item) {
      if (isset($metatags[$item])) {
        $metatags[$item] = $link;
      }
    }

    // unset wrong title, og image, etc.
    $items = array('title', 'og:image');
    foreach($items as $item) {
      if (isset($metatags[$item])) {
        unset($metatags[$item]);
      }
    }
  }
}

/**
 * Prepares variables for civicrm_contact templates.
 *
 * Default template: civicrm-contact.html.twig.
 */
function template_preprocess_civicrm_contact(&$vars) {
  $vars['civicrm_contact'] = $vars['elements']['#civicrm_contact'];
}

/**
 * hook_civicrm_buildForm
 * 
 * this hook call by CRM_Utils_Hook
 */
function civicrm_civicrm_buildForm($form_name, &$form) {
  $imceEnabled = \Drupal::moduleHandler()->moduleExists('imce');
  if ($imceEnabled) {
    $imceUrl = CRM_Utils_System::url('imce');
    foreach ($form->_elements as $name => $element) {
      if($element->_type == 'CKeditor') {
        $eleName = $element->_attributes['name'];
        // add external plugin
        $ckeditorInlineJs = "
window.civicrmImceCkeditSendTo = function (file, win) {
  var parts = /\?(?:.*&)?CKEditorFuncNum=(\d+)(?:&|$)/.exec(win.location.href);
  if (parts && parts.length > 1) {
    var url = file.getUrl();
    win.opener.CKEDITOR.tools.callFunction(parts[1], url);
    win.close();
  }
  else {
    throw 'CKEditorFuncNum parameter not found or invalid: ' + win.location.href;
  }
};
cj( function( ) {
  var editor = CKEDITOR.instances['".$eleName."'];
  var config = {};
  if (editor) {
    config = editor.config;
  }
  config['filebrowserImageBrowseUrl'] = '".$imceUrl."?sendto=civicrmImceCkeditSendTo';
});
";
        // this will add by CivicrmController
        CRM_Utils_System::addJs(array('type' => 'inline'), $ckeditorInlineJs);
      }
    }
  }
}