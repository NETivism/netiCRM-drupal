<?php

/**
 * Implements hook_install().
 */
function civicrm_install() {
  // If civicrm.settings.php file is already present, we assume CiviCRM
  // is already installed and abort.
  if (file_exists(\Drupal::service('kernel')->getSitePath() . '/civicrm.settings.php')) {
    drupal_set_message(t("CiviCRM appears to have already been installed. Skipping full installation."));
    return;
  }

  $civicrm_base = _civicrm_find_civicrm();

  require_once $civicrm_base . '/CRM/Core/ClassLoader.php';
  CRM_Core_ClassLoader::singleton()->register();

  // The civicrm install process uses globals all over the place. Ideally these
  // will go sometime soon and will be passed as explicit parameters.
  global $crmPath, $cmsPath, $installType;
  $crmPath = $civicrm_base;
  $cmsPath = \Drupal::root();
  $installType = 'drupal';

  // Get database connection details.
  // We attempt to get a separate set of details for a civicrm database, but
  // otherwise default to using the same database as Drupal.
  $drupal_db = \Drupal\Core\Database\Database::getConnection('default')->getConnectionOptions();
  $civicrm_db = _civicrm_get_db_config()['info'];

  $config = array(
    'cms' => 'Drupal8',
    'crm_path' => $crmPath,
    'cms_path' => $cmsPath,
    'base_url' => $GLOBALS['base_url'],
    'site_dir' => \Drupal::service('kernel')->getSitePath(), // Remove leading 'sites/'
    'crmdb' => array(
      'username' => $civicrm_db['username'],
      'password' => $civicrm_db['password'],
      'server' => "{$civicrm_db['host']}:{$civicrm_db['port']}",
      'database' => $civicrm_db['database'],
    ),
    'cmsdb' => array(
      'username' => $drupal_db['username'],
      'password' => $drupal_db['password'],
      'server' => "{$drupal_db['host']}:{$drupal_db['port']}",
      'database' => $drupal_db['database'],
    )
  );

  // step 0: init settings
  try {
    _civicrm_init_setting($config);
  }  
  catch(Exception $e){
    // remove module from list when initialize failed
    $module_data = \Drupal::config('core.extension')->get('module');
    unset($module_data['civicrm']);
    \Drupal::configFactory()->getEditable('core.extension')->set('module', $module_data)->save();
    $message = "CiviCRM installation failed on initialize civicrm settings.";
    drupal_set_message($message);
    \Drupal::messenger()->addError($message);
    \Drupal::logger('civicrm')->error($message.' Check Line:'. __LINE__);
    return;
  }
  // step 1: import databases
  _civicrm_import_sql($config, 'sql/civicrm.mysql');
  _civicrm_import_sql($config, 'sql/civicrm_data.zh_TW.mysql');
  _civicrm_import_sql($config, 'sql/civicrm_acl.zh_TW.mysql');

  // step 2: create file directory
  // Oh we can't create civicrm directory here. Leave it for initialize auto create script.
  $dirs = array(
    'public:://civicrm',
    'public://civicrm/templates_c',
    'public://civicrm/upload',
    'public://civicrm/persist',
    'public://civicrm/custom',
  );
  foreach($dirs as $dir) {
    \Drupal::service('file_system')->prepareDirectory($dir, \Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY);
  }
  \Drupal::messenger()->addStatus('CiviCRM installed successfully.');
}

/**
 * Implements hook_requirements().
 *
 * @param $phase
 */
function civicrm_requirements($phase) {
  $requirements = array();

  $civicrm_base = _civicrm_find_civicrm();
  $default_scheme = \Drupal::config('system.file')->get('default_scheme');

  if ($civicrm_base) {
    require_once($civicrm_base . '/Civi/Install/Requirements.php');
    $requirements['civicrm.location'] = array(
      'title' => 'CiviCRM location',
      'value' => $civicrm_base,
      'severity' => REQUIREMENT_OK,
      'description' => 'CiviCRM core directory',
    );
  }
  else {
    $requirements['civicrm.location'] = array(
      'title' => 'CiviCRM location',
      'value' => NULL,
      'severity' => REQUIREMENT_ERROR,
      'description' => 'CiviCRM must be installed via composer.',
    );
    return $requirements;
  }

  // Grab db connection info
  $db_config = _civicrm_get_db_config()['info'];

  $install_requirements = new \Civi\Install\Requirements();

  // Gather directories that need to be writable
  $file_paths = [];
  if (!file_exists(\Drupal::service('kernel')->getSitePath() . '/civicrm.settings.php')) {
    $file_paths[] =  realpath(\Drupal::service('kernel')->getSitePath()); // eg. sites/default folder
  }
  $file_paths[] = \Drupal::service('file_system')->realpath($default_scheme . "://"); // eg. sites/default/files folder

  // Attempt to make directories writable
  // We don't bother checking if these attempts are actually successful as
  // that will be checked by checkAll().
  foreach ($file_paths as $path) {
    @chmod($path, 0755);
  }

  foreach ($install_requirements->checkAll(array('db_config' => $db_config, 'file_paths' => $file_paths)) as $key => $result) {
    $requirements["civicrm.$key"] = array(
      'title' => $result['title'],
      'value' => NULL,
      'severity' => $result['severity'],
      'description' => $result['details'],
    );
  }

  return $requirements;
}

/**
 * Returns the path to where CiviCRM is installed.
 *
 * @return string|void
 *
 * Installation via composer is recommended.
 * We also allow /modules/civicrm, which seems to work fine.
 */
function _civicrm_find_civicrm() {

  $path = drupal_get_path('module', 'civicrm');
  $possible_paths = [];
  $possible_paths[] = DRUPAL_ROOT.'/'.str_replace('/drupal', '', $path);

  foreach ($possible_paths as $path) {
    if (file_exists($path . '/CRM/Core/ClassLoader.php')) {
      return $path;
    }
  }

  return NULL;
}

/**
 * Attempt to use a 'civicrm' labelled database connection if one exists.
 * Otherwise default to using the same connection used by drupal.
 *
 * Also handle the special case where this is running as a test.
 */
function _civicrm_get_db_config() {
  if (drupal_valid_test_ua()) {
    $config = \Drupal\Core\Database\Database::getConnectionInfo('civicrm_test');
    if ($config) {
      return array(
        'key' => 'civicrm_test',
        'info' => $config['default'],
      );
    }
    else {
      throw new \RuntimeException("No civicrm_test database provided");
    }
  }

  if ($config = \Drupal\Core\Database\Database::getConnectionInfo('civicrm')) {
    return array(
      'key' => 'civicrm',
      'info' => $config['default'],
    );
  }
  else {
    return array(
      'key' => 'default',
      'info' => \Drupal\Core\Database\Database::getConnectionInfo('default')['default'],
    );
  }
}
function _civicrm_init_setting($config){
  $include_path = '.'.PATH_SEPARATOR.$config['crm_path'].PATH_SEPARATOR.$config['crm_path'].'/packages'.PATH_SEPARATOR.get_include_path();
  set_include_path( $include_path );
  $setting = $config['site_dir'].'/civicrm.settings.php';
  if(file_exists($setting)){
    // trying to require 
    require_once $setting;
    $dsn = defined(CIVICRM_DSN) ? CIVICRM_DSN : NULL;
    if(empty($dsn)){
      throw new Exception(t('Could not detect database settings from civicrm.settings.php'));
    }
  }
  else{
    if(is_writable($config['site_dir'])){
      $default_scheme =\Drupal::config('system.file')->get('default_scheme');
      $params = array();
      $params['%%baseURL%%'] = base_path();
      $params['%%cms%%'] = 'Drupal';
      $params['%%CMSdbUser%%'] = addslashes($config['cmsdb']['username']);
      $params['%%CMSdbPass%%'] = addslashes($config['cmsdb']['password']);
      $params['%%CMSdbHost%%'] = $config['cmsdb']['server'];
      $params['%%CMSdbName%%'] = $config['cmsdb']['database'];
      $params['%%dbUser%%'] = addslashes($config['crmdb']['username']);
      $params['%%dbPass%%'] = addslashes($config['crmdb']['password']);
      $params['%%dbHost%%'] = $config['crmdb']['server'];
      $params['%%dbName%%'] = $config['crmdb']['database'];
      $params['%%crmRoot%%'] = $config['crm_path'].'/';
      $params['%%templateCompileDir%%'] =\Drupal::service('file_system')->realpath($default_scheme  . "://").'/civicrm/templates_c/';
      $params['%%siteKey%%'] = md5($GLOBALS['base_url'].microtime());

      $filename = $config['crm_path'].'/templates/CRM/common/civicrm.settings.php.template';
      $setting_content = file_get_contents($filename);
      $setting_content = str_replace(array_keys($params), $params, $setting_content);
      $success = file_put_contents($setting, $setting_content);
      if(!$success){
        throw new Exception(t('CiviCRM settings does not exist'));
      }
    }
    else{
      throw new Exception(t('Drupal settings dir not writable'));
    }
  }
  require_once $setting;
  require_once $config['crm_path']."/packages/DB.php";
  _civicrm_db_test();
}

/**
 * Helper function for test civicrm if installed
 */
function _civicrm_db_test(){
  // test if database exists
  $db_crm  = DB::connect(CIVICRM_DSN);
  $pear = new PEAR;
  if($pear->isError($db_crm)) {
    throw new Exception(t('Database connection failed when enable civicrm'));
  }
  else{
    $res = $db_crm->query("SHOW TABLES LIKE 'ciivcrm_contact'");
    if($res->numRows()){
      throw new Exception(t('CiviCRM already exists in database.'));
    }
  }
}

function _civicrm_import_sql($config, $filename){
  $crm_root = $config['crm_path'];
  $dsn = CIVICRM_DSN;
  $filename = $crm_root.'/'.$filename;

  $db = DB::connect($dsn);
  $pear = new PEAR;
  if($pear->isError($db)) {
    \Drupal::logger('civicrm')->error("Cannot open $dsn: " . $db->getMessage().' Check Line:'. __LINE__);
    return FALSE;
  }
  $string = file_get_contents( $filename );

  // change \r\n to fix windows issues
  $string = str_replace("\r\n", "\n", $string );

  //get rid of comments starting with # and --
  $string = preg_replace("/^#[^\n]*$/m",   "\n", $string );
  $string = preg_replace("/^(--[^-]).*/m", "\n", $string );
  $db->query("/*!40101 SET NAMES utf8mb4 */");

  $queries = preg_split('/;$/m', $string);
  foreach ( $queries as $query ) {
    $query = trim( $query );
    if (!empty($query)) {
      $res = $db->query( $query );
      if ( $pear->isError( $res ) ) {
        \Drupal::logger('civicrm')->error("Cannot execute $query: " . $res->getMessage().' Check Line:'. __LINE__);
        return FALSE;
      }
    }
  }
  return TRUE;
}