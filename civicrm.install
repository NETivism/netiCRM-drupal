<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 3.3                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2010                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

define( 'CIVICRM_DIRECTORY_SEPARATOR', DIRECTORY_SEPARATOR );

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2010
 * $Id$
 *
 */

function civicrm_install( ) {
  global $base_url;
  // got to doing real install here.
  // prepare variables first.
  $crm_root = rtrim(dirname(__FILE__), "/drupal");
  $conf_path = conf_path();
  global $db_url;
  $include_path = '.'.PATH_SEPARATOR.$crm_root.PATH_SEPARATOR.$crm_root.'/packages'.PATH_SEPARATOR.get_include_path();
  set_include_path( $include_path );

  // step 1: import databases
  require_once "$crm_root/packages/DB.php";
  if(is_array($db_url)){ // this should be another trick to detect active db_url
    $dsn = str_replace("mysqli", "mysql", $db_url['default'])."?new_link=true";
  }
  else{
    $dsn = str_replace("mysqli", "mysql", $db_url)."?new_link=true";
  }

  $success = _civicrm_import_sql( $dsn, $crm_root.'/sql/civicrm.mysql');
  if($success){
    _civicrm_import_sql( $dsn, $crm_root.'/sql/civicrm_data.zh_TW.mysql');
    _civicrm_import_sql( $dsn, $crm_root.'/sql/civicrm_acl.zh_TW.mysql');
  }

  // step 2: create file directory
  // Oh we can't create civicrm directory here. Leave it for initialize auto create script.
  file_check_directory(file_create_path('civicrm'), FILE_CREATE_DIRECTORY);
  file_check_directory(file_create_path('civicrm/templates_c'), FILE_CREATE_DIRECTORY);
  file_check_directory(file_create_path('civicrm/upload'), FILE_CREATE_DIRECTORY);
  file_check_directory(file_create_path('civicrm/persist'), FILE_CREATE_DIRECTORY);
  file_check_directory(file_create_path('civicrm/custom'), FILE_CREATE_DIRECTORY);

  // step 3: copy civicrm.settings.php to correct directory
  $filename = $crm_root.'/templates/CRM/common/civicrm.settings.php.tpl';
  $setting_content = file_get_contents($filename);
  $setting_content = str_replace('%%'.$key.'%%', md5($base_url.microtime()), $setting_content);
  file_put_contents("$conf_path/civicrm.settings.php", $setting_content);
  drupal_set_message("CiviCRM for Drupal Installation Successful.");
}

/**
 * Implementation of hook_uninstall( )
 */
function civicrm_uninstall( ) {
    require_once 'civicrm.module';

    if ( ! civicrm_initialize( ) ) {
        return;
    }

    require_once 'CRM/Core/Config.php';
    $config =& CRM_Core_Config::singleton();

    require_once 'CRM/Core/DAO.php';
    CRM_Core_DAO::dropAllTables( );

    // delete civicrm.settings.php
    $civicrm_settings_file = conf_path().'/civicrm.settings.php';
    $res = file_delete($civicrm_settings_file);
    if(!$res){
      drupal_set_message('You need to delete civicrm.settings.php file manually.', 'error');
    }
    
    // remove whole civicrm directory
    civicrm_recursive_rmdir(file_create_path('civicrm'));
}

/**
 * Helper function for import sql
 */
function _civicrm_import_sql($dsn, $fileName){
  $db =& DB::connect( $dsn );
  if(PEAR::isError( $db )) {
    watchdog("civicrm", "Cannot open $dsn: " . $db->getMessage( ) );
    return FALSE;
  }
  $string = file_get_contents( $fileName );

  // change \r\n to fix windows issues
  $string = str_replace("\r\n", "\n", $string );

  //get rid of comments starting with # and --
  $string = preg_replace("/^#[^\n]*$/m",   "\n", $string );
  $string = preg_replace("/^(--[^-]).*/m", "\n", $string );

  $queries  = preg_split('/;$/m', $string);
  foreach ( $queries as $query ) {
    $query = trim( $query );
    if ( ! empty( $query ) ) {
      $res =& $db->query( $query );
      if ( PEAR::isError( $res ) ) {
        watchdog("civicrm", "Cannot execute $query: " . $res->getMessage( ) );
        return FALSE;
      }
    }
  }
  return TRUE;
}


function civicrm_enable( ) {
    // set system weight higher than jQuery_update so Civi's preprocess can run
    // last. This is the only way to make sure the jquery noconflict works.
    db_query("UPDATE {system} SET weight = 100 WHERE name = 'civicrm'");
    menu_rebuild( );
    menu_link_maintain( 'civicrm', 'delete', 'civicrm', 'CiviCRM' );
    
    $options = array(
                     'link_title' => 'CiviCRM',
                     'link_path'  => 'civicrm/dashboard',
                     'module'     => 'civicrm',
                     'options'    => array( 'alter' => true )
                     );
    menu_link_save( $options );

    if ( ! civicrm_initialize( ) ) {
        return;
    }

    // also invoke civicrm menu rebuild
    require_once 'CRM/Core/Menu.php';
    CRM_Core_Menu::store( );

    //Update the 'blocks' DB table with the blocks
    _block_rehash();
}
/**
 * Update CiviCRM module weight
 */
function civicrm_update_6300(&$sandbox) {
  db_query("UPDATE {system} SET weight = 100 WHERE name = 'civicrm'");
}

function civicrm_requirements($phase){
  $problem = array();
  if ($phase == 'install') {
    $memory_limit = ini_get('memory_limit');
    if ($memory_limit && $memory_limit != -1 && parse_size($memory_limit) < parse_size('128M')){
      $problem['civicrm_memory_limit'] = array(
        'title' => t('CiviCRM PHP memory limit'),
        'value' => $memory_limit,
        'severity' => REQUIREMENT_ERROR,
        'description' => t('CiviCRM Install Error: Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the installation process.', array('%memory_minimum_limit' => '128M')),
      );
    }

    // test InnoDB
    /* // remove from drupal 6.28 which have db_query not found error
    $result = db_query( "SHOW variables like 'have_innodb'");
    if ( $result ) {
      $have_innodb = db_fetch_object( $result );
      if ( strtolower( $have_innodb->Value) != 'yes' ) {
        $problem['civicrm_have_innodb'] = array(
          'title' => t('CiviCRM Need InnoDB'),
          'description' => t('CiviCRM Install Error: Please check your InnoDB enabled in MySQL.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
    */
    
    // test civicrm.settings.php write permissions
    require_once './includes/install.inc';
    $conf_path = conf_path();
    $settings_file = $conf_path.'/civicrm.settings.php';
    $passed = FALSE;
    if (drupal_verify_install_file($conf_path, FILE_EXIST|FILE_WRITABLE, 'dir')) {
      // Check to make sure a settings.php already exists.
      if (!drupal_verify_install_file($settings_file, FILE_EXIST)) {
        $passed = TRUE;
      }
      else{
        $desc = t('CiviCRM Install Error: civicrm.settings.php already exists. Please remove previous installed civicrm.');
      }
    }
    else{
      $desc = t('CiviCRM Install Error: Please make sure you have write permission for install civicrm. Directory path: !path', array('!path' => $conf_path));
    }
    if(!$passed){
      $problem['civicrm_setings'] = array(
        'title' => t('CiviCRM Install Error: Please check your config path is writable(same as your settings.php).'),
        'description' => $desc,
        'severity' => REQUIREMENT_ERROR,
      );
    }

    // check php-gettext enabled in php
    if(!function_exists('gettext')){
      $problem['civicrm_gettext'] = array(
        'title' => t('CiviCRM Install Error: Please enable php-gettext extension.'),
        'description' => 'Read more about how to install php-gettext here: http://php.net/manual/en/book.gettext.php',
        'severity' => REQUIREMENT_ERROR,
      );
    }
  } 
  return $problem;
}


function civicrm_recursive_rmdir($directory, $empty = FALSE) {
  if(substr($directory,-1) == '/'){
    $directory = substr($directory,0,-1);
  }
  if(!file_exists($directory) || !is_dir($directory)){
    return FALSE;
  }
  elseif(is_readable($directory)){
    $handle = opendir($directory);
    while (FALSE !== ($item = readdir($handle))) {
      if($item != '.' && $item != '..') {
        $path = $directory.'/'.$item;
        if(is_dir($path)) {
          civicrm_recursive_rmdir($path);
        }
        else{
          unlink($path);
        }
      }
    }
    closedir($handle);
    if($empty == FALSE){
      if(!rmdir($directory)) {
        return FALSE;
      }
    }
  }
  return TRUE;
}

